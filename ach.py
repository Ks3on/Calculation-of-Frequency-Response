from PyQt5.QtWidgets import (QApplication, QMainWindow, QComboBox, QVBoxLayout, QHBoxLayout, QWidget, QLabel, QLineEdit, QPushButton, QTextEdit, QFormLayout, QSizePolicy, QSpacerItem, QCheckBox)
import sys
from PyQt5.QtWidgets import QTextEdit
from PyQt5.QtWidgets import QFormLayout
import math
from PyQt5.QtGui import QIcon
import pyqtgraph as pg
import numpy as np
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QSizePolicy
from PyQt5.QtWidgets import QSpacerItem
from PyQt5.QtCore import Qt
from PyQt5.QtCore import QByteArray

#Логотип Приложения
image1_data = ""
#Логотип ОмГТУ
image2_data = ""
ba = QByteArray.fromBase64(image1_data.encode())

ba1 = QByteArray.fromBase64(image2_data.encode())

class RangeError(Exception):
    pass

class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()

        # Создание QPixmap из QByteArray
        pixmap = QPixmap()
        pixmap.loadFromData(ba, "JPG")  # Используйте "PNG", если ваше изображение в формате PNG

        # Создание QIcon из QPixmap
        icon = QIcon(pixmap)

        # Устанавливаем иконку окна
        self.setWindowIcon(icon)
        self.setWindowTitle("Рачёт АЧХ для фильтров")

        self.filter_label = QLabel("Фильтр:")
        self.filter_select = QComboBox()
        self.filter_select.addItems(["ФНЧ- фильтр нижних частот", "ФВЧ- фильтр верхних частот", "Полосовой фильтр", "Режекторный фильтр"])
        self.filter_select.setFixedSize(200, 30)

        self.filter_type_label = QLabel("Тип фильтра:")
        self.filter_type_select = QComboBox()
        self.filter_type_select.addItems(["Фильтр Баттерворта", "Фильтр Чебышева", "Фильтр Гаусса"])
        self.filter_type_select.currentIndexChanged.connect(self.update_stages)
        self.filter_type_select.setFixedSize(200, 30)

        self.stages_label = QLabel("Количество звеньев:")
        self.stages_select = QComboBox()
        self.stages_select.setFixedSize(200, 30)

        self.order_label = QLabel("Порядок:")
        self.order_select = QComboBox()
        self.order_select.addItems(["1", "2"])
        self.order_select.setFixedSize(200, 30)
        self.order_label.hide()
        self.order_select.hide()

        self.ripple_label = QLabel("Неравномерность:")
        self.ripple_input = QLineEdit()
        self.ripple_input.setFixedSize(200, 30)
        self.ripple_input.setText("1.0")
        self.ripple_label.hide()
        self.ripple_input.hide()

        self.cutoff_freq_label = QLabel("Частота среза:")
        self.cutoff_freq_input = QLineEdit()
        self.cutoff_freq_input.setFixedSize(100, 30)
        self.cutoff_freq_input.setText("1.0")  # Устанавливаем значение по умолчанию

        self.freq_unit_select = QComboBox()
        self.freq_unit_select.addItems(["Гц", "кГц", "МГц", "ГГц"])
        self.freq_unit_select.setFixedSize(100, 30)

        self.cutoff_freq_label2 = QLabel("Частота среза:")
        self.cutoff_freq_input2 = QLineEdit()
        self.cutoff_freq_input2.setFixedSize(100, 30)
        self.cutoff_freq_input2.setText("2.0")  # Устанавливаем значение по умолчанию

        self.freq_unit_select2 = QComboBox()
        self.freq_unit_select2.addItems(["Гц", "кГц", "МГц", "ГГц"])
        self.freq_unit_select2.setFixedSize(100, 30)

        self.cutoff_freq_label2.hide()
        self.cutoff_freq_input2.hide()
        self.freq_unit_select2.hide()

        self.filter_select.currentIndexChanged.connect(self.update_cutoff_freq)

        # Добавляем новое окно для вывода результатов расчетов
        self.results_label = QLabel("Расчет:")
        self.results_output = QTextEdit()
        self.results_output.setFixedWidth(250)
        self.results_output.setReadOnly(True)  # делаем поле только для чтения

        # Добавляем новые поля ввода
        self.range_start_label = QLabel("Начало диапазона:")
        self.range_start_input = QLineEdit()
        self.range_start_input.setFixedSize(100, 30)
        self.range_start_input.setText("0.001")  # Устанавливаем значение по умолчанию
        self.range_start_unit_label = QLabel("Гц")
        self.range_start_unit_label.setFixedSize(30, 30)

        self.step_label = QLabel("Шаг:")
        self.step_input = QLineEdit()
        self.step_input.setFixedSize(100, 30)
        self.step_input.setText("0.1")  # Устанавливаем значение по умолчанию
        self.step_unit_label = QLabel("Гц")
        self.step_unit_label.setFixedSize(30, 30)

        self.range_end_label = QLabel("Конец диапазона:")
        self.range_end_input = QLineEdit()
        self.range_end_input.setFixedSize(100, 30)
        self.range_end_input.setText("10.0")  # Устанавливаем значение по умолчанию
        self.range_end_unit_label = QLabel("Гц")
        self.range_end_unit_label.setFixedSize(30, 30)

        self.voltage_label = QLabel("Сопротивление:")
        self.voltage_input = QLineEdit()
        self.voltage_input.setFixedSize(100, 30)
        self.voltage_input.setText("50")  # Устанавливаем значение по умолчанию
        self.voltage_unit_label = QLabel("Ом")
        self.voltage_unit_label.setFixedSize(30, 30)

        self.zc_label = QLabel("Характеристическое сопротивление:")
        self.zc_input = QLineEdit()
        self.zc_input.setFixedSize(100, 30)
        self.zc_input.setText("50")  # Значение по умолчанию
        self.zc_unit_label = QLabel("Ом")
        self.zc_unit_label.setFixedSize(30, 30)

        
        # Создаем горизонтальный компоновщик для строки ввода и метки
        voltage_layout = QHBoxLayout()
        voltage_layout.addWidget(self.voltage_input)
        voltage_layout.addWidget(self.voltage_unit_label)

        # Создаем горизонтальные компоновщики для диапазона и шага
        range_start_layout = QHBoxLayout()
        range_start_layout.addWidget(self.range_start_input)
        range_start_layout.addWidget(self.range_start_unit_label)

        step_layout = QHBoxLayout()
        step_layout.addWidget(self.step_input)
        step_layout.addWidget(self.step_unit_label)

        range_end_layout = QHBoxLayout()
        range_end_layout.addWidget(self.range_end_input)
        range_end_layout.addWidget(self.range_end_unit_label)

        # Создаем кнопку "Рассчитать"
        self.calculate_button = QPushButton("Рассчитать")
        self.calculate_button.clicked.connect(self.calculate)
        self.calculate_button.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)

        self.hide_transfer_function_checkbox = QCheckBox("Скрыть функцию передачи")
        self.hide_transfer_function_checkbox.setChecked(False)

        # Создаем новое окно для графика
        self.graph_label = QLabel("График АЧХ:")
        self.graph_label.setAlignment(Qt.AlignTop)
        self.graph_view = pg.PlotWidget()
        self.graph_view.setBackground('w')

        # Устанавливаем цвет меток и черточек на осях
        self.graph_view.getAxis('bottom').setPen('k')  # Черные метки и черточки на оси X
        self.graph_view.getAxis('left').setPen('k')  # Черные метки и черточки на оси Y

        # Добавляем сетку на фон графика
        self.graph_view.showGrid(x=True, y=True)

        # Создаем новое окно для второго графика
        self.graph_label2 = QLabel("Коэффициент стоячей волны по напряжению:")
        self.graph_label2.setAlignment(Qt.AlignTop)
        self.graph_view2 = pg.PlotWidget()
        self.graph_view2.setBackground('w')

        # Устанавливаем цвет меток и черточек на осях
        self.graph_view2.getAxis('bottom').setPen('k')  # Черные метки и черточки на оси X
        self.graph_view2.getAxis('left').setPen('k')  # Черные метки и черточки на оси Y

        # Добавляем сетку на фон графика
        self.graph_view2.showGrid(x=True, y=True) 

        spacer = QSpacerItem(0, 0, QSizePolicy.Minimum, QSizePolicy.Expanding)

        spacer_layout = QVBoxLayout()
        spacer_layout.addItem(spacer)

        spacer_layout1 = QVBoxLayout()
        spacer_layout1.addItem(spacer)

        # Создаем главный горизонтальный компоновщик
        main_layout = QHBoxLayout()
        main_layout.addStretch()

        # Создаем компоновщик для первого графика и его подписи
        graph_layout = QVBoxLayout()
        graph_layout.addWidget(self.graph_label)
        self.graph_view.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)  # Устанавливаем политику изменения размера для графика
        graph_layout.addWidget(self.graph_view)
        graph_layout.addLayout(spacer_layout)

        # Создаем компоновщик для второго графика и его подписи
        graph_layout2 = QVBoxLayout()
        graph_layout2.addWidget(self.graph_label2)
        self.graph_view2.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)  # Устанавливаем политику изменения размера для графика
        graph_layout2.addWidget(self.graph_view2)
        graph_layout2.addLayout(spacer_layout1)  

        # Создаем вертикальный компоновщик для графиков
        graphs_layout = QVBoxLayout()
        graphs_layout.addLayout(graph_layout)   # Первый график
        graphs_layout.addLayout(graph_layout2)  # Второй график под первым

        # Создаем компоновщик для результатов расчетов
        results_layout = QVBoxLayout()
        results_layout.addWidget(self.results_label)
        results_layout.addWidget(self.results_output)

        cutoff_freq_layout1 = QHBoxLayout()
        cutoff_freq_layout1.addWidget(self.cutoff_freq_input)
        cutoff_freq_layout1.addWidget(self.freq_unit_select)

        cutoff_freq_layout2 = QHBoxLayout()
        cutoff_freq_layout2.addWidget(self.cutoff_freq_input2)
        cutoff_freq_layout2.addWidget(self.freq_unit_select2)

        form_layout = QFormLayout()
        form_layout.addRow(self.filter_label)
        form_layout.addRow(self.filter_select)
        form_layout.addRow(self.filter_type_label)
        form_layout.addRow(self.filter_type_select)
        form_layout.addRow(self.stages_label)
        form_layout.addRow(self.stages_select)
        form_layout.addRow(self.order_label)
        form_layout.addRow(self.order_select)
        form_layout.addRow(self.ripple_label)
        form_layout.addRow(self.ripple_input)
        form_layout.addRow(self.cutoff_freq_label)
        form_layout.addRow(cutoff_freq_layout1)
        form_layout.addRow(self.cutoff_freq_label2)
        form_layout.addRow(cutoff_freq_layout2)
        form_layout.addRow(self.range_start_label)
        form_layout.addRow(range_start_layout)
        form_layout.addRow(self.step_label)
        form_layout.addRow(step_layout)
        form_layout.addRow(self.range_end_label)
        form_layout.addRow(range_end_layout)
        form_layout.addRow(self.voltage_label)
        form_layout.addRow(voltage_layout)
                # Добавляем в форму
        form_layout.addRow(self.zc_label)
        form_layout.addRow(self.zc_input, self.zc_unit_label)

        form_layout.addRow(self.hide_transfer_function_checkbox)
        form_layout.addRow(self.calculate_button)

        # Вызываем update_stages после того, как все элементы были добавлены
        self.update_stages()

        # Создаем вертикальный компоновщик для текста и изображения
        text_image_layout = QVBoxLayout()

        # Создаем метку для текста
        text_label = QLabel("Описание:\n\nПрограмма разработана как стенд для лабораторных работ.\n"
                            "\nАвторы: \n\n— Руководитель проекта: \n1. д.т.н. профессор ССИБ И.В. Богачков\n\n"
                            "— Студенты группы ИСС-221: \n2. Гаус Елена Алексеевна \n3. Анисимов Константин Николаевич \n\n")
        text_label.setAlignment(Qt.AlignTop)
        text_image_layout.addWidget(text_label)

        # Создаем метку для изображения
        image_label = QLabel()
        pixmap = QPixmap()
        pixmap.loadFromData(ba1, "jpg")
        pixmap = pixmap.scaled(350, 350, Qt.KeepAspectRatio)
        image_label.setPixmap(pixmap)
        text_image_layout.addWidget(image_label)
        text_image_layout.addStretch()    

        # Добавляем компоновщик с текстом и изображением в главный компоновщик
        main_layout.addLayout(text_image_layout)
        main_layout.addLayout(results_layout)  # Результаты расчетов по центру
        main_layout.addLayout(form_layout)  # Выбор фильтров и ввод чисел по центру
        main_layout.addLayout(graphs_layout)
        #main_layout.addLayout(graph_layout)  # График справа # График справа
        #main_layout.addLayout(graph_layout2)  # Добавляем второй график справа
        main_layout.addStretch()
        

        container = QWidget()
        container.setLayout(main_layout)

        self.setCentralWidget(container)

    def update_results(self, results):
        self.results_output.clear()
        self.results_output.append(results)

    def update_cutoff_freq(self):
        if self.filter_select.currentText() in ["Полосовой фильтр", "Режекторный фильтр"]:
            self.cutoff_freq_label2.show()
            self.cutoff_freq_input2.show()
            self.freq_unit_select2.show()
        else:
            self.cutoff_freq_label2.hide()
            self.cutoff_freq_input2.hide()
            self.freq_unit_select2.hide()

    def update_stages(self):
        self.stages_select.clear()
        if self.filter_type_select.currentText() == "Фильтр Чебышева":
            self.stages_select.addItems([str(i) for i in range(3, 10)])
            self.order_label.show()
            self.order_select.show()
            self.ripple_label.show()
            self.ripple_input.show()
        else:
            self.stages_select.addItems([str(i) for i in range(2, 10)])
            self.order_label.hide()
            self.order_select.hide()
            self.ripple_label.hide()
            self.ripple_input.hide()

        if self.filter_select.currentText() in ["Полосовой фильтр", "Режекторный фильтр"]:
            self.cutoff_freq_label2.show()
            self.cutoff_freq_input2.show()
            self.freq_unit_select2.show()
        else:
            self.cutoff_freq_label2.hide()
            self.cutoff_freq_input2.hide()
            self.freq_unit_select2.hide()

    def calculate_L_C(self, f0, voltage, f02=None):
        # Переводим частоту среза в Гц, если она еще не в Гц
        f0_in_hz = self.convert_to_hz(f0, "Гц")[0]

        # Расчет L и C для первой частоты среза
        L = voltage / (2 * math.pi * f0_in_hz)
        C = 1 / (2 * math.pi * f0_in_hz * voltage)

        if f02 is not None:
            # Переводим вторую частоту среза в Гц, если она еще не в Гц
            f02_in_hz = self.convert_to_hz(f02, "Гц")[0]

            # Расчет L и C для второй частоты среза
            L2 = voltage / (2 * math.pi * f02_in_hz)
            C2 = 1 / (2 * math.pi * f02_in_hz * voltage)

            return (L, C), (L2, C2)

        return L, C

    def calculate(self):
        try:
            self.results_output.clear()

            # Получаем входные данные
            filter_type = self.filter_select.currentText()
            filter_subtype = self.filter_type_select.currentText()
            stages = int(self.stages_select.currentText())
            order = self.try_convert_to_float(
                self.order_select.currentText()) if self.order_select.isVisible() else None
            ripple = self.try_convert_to_float(self.ripple_input.text()) if self.ripple_input.isVisible() else None
            cutoff_freq = self.try_convert_to_float(self.cutoff_freq_input.text())
            cutoff_freq_unit = self.freq_unit_select.currentText()
            cutoff_freq2 = self.try_convert_to_float(
                self.cutoff_freq_input2.text()) if self.cutoff_freq_input2.isVisible() else None
            cutoff_freq2_unit = self.freq_unit_select2.currentText() if self.freq_unit_select2.isVisible() else None

            # Получаем значения для диапазона и шага
            range_start = self.try_convert_to_float(self.range_start_input.text())
            range_end = self.try_convert_to_float(self.range_end_input.text())
            step = self.try_convert_to_float(self.step_input.text())

            # Получаем значение напряжения
            voltage = self.try_convert_to_float(self.voltage_input.text())

            # Получаем значение характеристического сопротивления Zc
            Zc = self.try_convert_to_float(self.zc_input.text())

            # Проверка Zc
            if Zc <= 0:
                raise RangeError("Ошибка: характеристическое сопротивление не может быть меньше или равно нулю")

            # Проверка и замена 0 в начале диапазона
            if range_start == 0:
                range_start = 0.001

            # Переводим частоты среза в Гц
            cutoff_freq_in_hz, cutoff_freq_conversion = self.convert_to_hz(cutoff_freq, cutoff_freq_unit)
            cutoff_freq2_in_hz, cutoff_freq2_conversion = (None, None)
            if cutoff_freq2 is not None:
                cutoff_freq2_in_hz, cutoff_freq2_conversion = self.convert_to_hz(cutoff_freq2, cutoff_freq2_unit)

            # Проверка ввода
            if cutoff_freq_in_hz is not None and cutoff_freq2_in_hz is not None:
                if cutoff_freq_in_hz == cutoff_freq2_in_hz:
                    raise RangeError("Ошибка: две частоты среза не могут быть равны")
                if cutoff_freq_in_hz > cutoff_freq2_in_hz:
                    raise RangeError("Ошибка: первая частота среза не может быть больше второй")
            if cutoff_freq is not None and cutoff_freq <= 0:
                raise RangeError("Ошибка: частота среза не может быть отрицательной или быть равна 0")
            if cutoff_freq2 is not None and cutoff_freq2 <= 0:
                raise RangeError("Ошибка: частота среза не может быть отрицательной или быть равна 0")
            if ripple is not None and ripple <= 0:
                raise RangeError("Ошибка: неравномерность не может быть меньше или равна нулю")
            if range_start is not None and range_start < 0:
                raise RangeError("Ошибка: начало диапазона не может быть отрицательным")
            if range_end is not None and range_end < 0:
                raise RangeError("Ошибка: конец диапазона не может быть отрицательным")
            if range_start is not None and range_end is not None and range_start >= range_end:
                raise RangeError("Ошибка: начало диапазона не может быть больше или равно его концу")
            if step is not None and step <= 0:
                raise RangeError("Ошибка: шаг должен быть больше нуля")
            if step is not None and range_start is not None and range_end is not None and step >= (
                    range_end - range_start):
                raise RangeError("Ошибка: шаг не может быть больше диапазона или равен ему")
            if range_start is not None and range_end is not None and (
                    range_end - range_start) > 10000 and step is not None and step < 100:
                raise RangeError("Ошибка: для диапазона больше 10000 шаг не может быть меньше 100")
            max_ripple = 100  # Установите максимальное значение ripple, которое не вызовет OverflowError
            if ripple is not None and ripple > max_ripple:
                raise RangeError(f"Ошибка: неравномерность не может быть больше {max_ripple}")
            if voltage is not None and voltage <= 0:
                raise RangeError("Ошибка: Сопротивление не может быть отрицательным или равным нулю")

            # Вызываем соответствующую функцию для расчета
            if filter_type == "ФНЧ- фильтр нижних частот":
                if filter_subtype == "Фильтр Баттерворта":
                    results = self.calculate_lowpass_butterworth(stages, cutoff_freq_in_hz, range_start, step, range_end, voltage)
                elif filter_subtype == "Фильтр Чебышева":
                    results = self.calculate_lowpass_chebyshev(stages, order, ripple, cutoff_freq_in_hz, range_start, step, range_end, voltage)
                elif filter_subtype == "Фильтр Гаусса":
                    results = self.calculate_lowpass_gauss(stages, cutoff_freq_in_hz, range_start, step, range_end, voltage)
            elif filter_type == "ФВЧ- фильтр верхних частот":
                if filter_subtype == "Фильтр Баттерворта":
                    results = self.calculate_1_butterworth(stages, cutoff_freq_in_hz, range_start, step, range_end, voltage)
                elif filter_subtype == "Фильтр Чебышева":
                    results = self.calculate_1_chebyshev(stages, order, ripple, cutoff_freq_in_hz, range_start, step, range_end, voltage)
                elif filter_subtype == "Фильтр Гаусса":
                    results = self.calculate_1_gauss(stages, cutoff_freq_in_hz, range_start, step, range_end, voltage)
            elif filter_type == "Полосовой фильтр":
                if filter_subtype == "Фильтр Баттерворта":
                    results = self.calculate_2_butterworth(stages, cutoff_freq_in_hz, cutoff_freq2_in_hz, range_start, step, range_end, voltage)
                elif filter_subtype == "Фильтр Чебышева":
                    results = self.calculate_2_chebyshev(stages, order, ripple, cutoff_freq_in_hz, cutoff_freq2_in_hz, range_start, step, range_end, voltage)
                elif filter_subtype == "Фильтр Гаусса":
                    results = self.calculate_2_gauss(stages, cutoff_freq_in_hz, cutoff_freq2_in_hz, range_start, step, range_end, voltage)
            elif filter_type == "Режекторный фильтр":
                if filter_subtype == "Фильтр Баттерворта":
                    results = self.calculate_3_butterworth(stages, cutoff_freq_in_hz, cutoff_freq2_in_hz, range_start, step, range_end, voltage)
                elif filter_subtype == "Фильтр Чебышева":
                    results = self.calculate_3_chebyshev(stages, order, ripple, cutoff_freq_in_hz, cutoff_freq2_in_hz, range_start, step, range_end, voltage)
                elif filter_subtype == "Фильтр Гаусса":
                    results = self.calculate_3_gauss(stages, cutoff_freq_in_hz, cutoff_freq2_in_hz, range_start, step, range_end, voltage)

            # Обновляем поле с результатами
            if cutoff_freq_conversion is not None:
                self.results_output.append(cutoff_freq_conversion)
            if cutoff_freq2 is not None and cutoff_freq2_conversion is not None:
                self.results_output.append(cutoff_freq2_conversion)
            self.results_output.append(results)
        except ValueError as e:
            self.results_output.append("Ошибка: введите только числа")
        except RangeError as e:
            self.results_output.append(str(e))

    def convert_to_hz(self, freq, unit):
        if unit == "кГц":
            return freq * 1e3, f"{freq} кГц = {freq * 1e3} Гц"
        elif unit == "МГц":
            return freq * 1e6, f"{freq} МГц = {freq * 1e6} Гц"
        elif unit == "ГГц":
            return freq * 1e9, f"{freq} ГГц = {freq * 1e9} Гц"
        else:  # Гц
            return freq, None

    def try_convert_to_float(self, value):
        try:
            return float(value)
        except ValueError:
            raise RangeError(f"Ошибка: не удалось преобразовать '{value}' в число")

    def get_pn_values(self, stages):
        # Значения pn для каждого звена в зависимости от общего количества звеньев для Баттерворта
        pn_values = {
            (2, 1): 1.414,  # Значение pn для C1, если выбрано 2 звена
            (2, 2): 1.414,  # Значение pn для L2, если выбрано 2 звена
            (3, 1): 1.000,  # Значение pn для C1, если выбрано 3 звена
            (3, 2): 2.000,  # Значение pn для L2, если выбрано 3 звена
            (3, 3): 1.000,  # Значение pn для C3, если выбрано 3 звена
            (4, 1): 0.7654,
            (4, 2): 1.848,
            (4, 3): 1.848,
            (4, 4): 0.7654,
            (5, 1): 0.618,
            (5, 2): 1.618,
            (5, 3): 2.000,
            (5, 4): 1.618,
            (5, 5): 0.618,
            (6, 1): 0.5176,
            (6, 2): 1.414,
            (6, 3): 1.932,
            (6, 4): 1.932,
            (6, 5): 1.414,
            (6, 6): 0.5176,
            (7, 1): 0.445,
            (7, 2): 1.247,
            (7, 3): 1.802,
            (7, 4): 2.000,
            (7, 5): 1.802,
            (7, 6): 1.247,
            (7, 7): 0.445,
            (8, 1): 0.3902,
            (8, 2): 1.111,
            (8, 3): 1.663,
            (8, 4): 1.962,
            (8, 5): 1.962,
            (8, 6): 1.663,
            (8, 7): 1.111,
            (8, 8): 0.3902,
            (9, 1): 0.3473,
            (9, 2): 1.000,
            (9, 3): 1.532,
            (9, 4): 1.879,
            (9, 5): 2.000,
            (9, 6): 1.879,
            (9, 7): 1.532,
            (9, 8): 1.000,
            (9, 9): 0.3473,
        }
        return {k: v for k, v in pn_values.items() if k[0] == stages}

    def get_pn_values_chebyshev(self, stages):
        # Значения pn для каждого звена в зависимости от общего количества звеньев для Чебышева
        pn_values_chebyshev = {
            (3, 1): 1.3451,  # Значение pn для C1, если выбрано 3 звена
            (3, 2): 2.1412,  # Значение pn для L2, если выбрано 3 звена
            (3, 3): 1.3451,  # Значение pn для C3, если выбрано 3 звена
            (4, 1): 1.146,
            (4, 2): 1.513,
            (4, 3): 1.513,
            (4, 4): 1.146,
            (5, 1): 1.456,
            (5, 2): 1.307,
            (5, 3): 2.283,
            (5, 4): 1.307,
            (5, 5): 1.456,
            (6, 1): 1.277,
            (6, 2): 1.528,
            (6, 3): 1.878,
            (6, 4): 1.878,
            (6, 5): 1.528,
            (6, 6): 1.277,
            (7, 1): 1.488,
            (7, 2): 1.343,
            (7, 3): 2.388,
            (7, 4): 1.451,
            (7, 5): 2.388,
            (7, 6): 1.343,
            (7, 7): 1.488,
            (8, 1): 1.340,
            (8, 2): 1.508,
            (8, 3): 2.019,
            (8, 4): 1.844,
            (8, 5): 1.844,
            (8, 6): 2.019,
            (8, 7): 1.508,
            (8, 8): 1.340,
            (9, 1): 1.502,
            (9, 2): 1.357,
            (9, 3): 2.420,
            (9, 4): 1.481,
            (9, 5): 2.480,
            (9, 6): 1.481,
            (9, 7): 2.420,
            (9, 8): 1.357,
            (9, 9): 1.502,
        }
        return {k: v for k, v in pn_values_chebyshev.items() if k[0] == stages}

    def get_pn_values_gauss(self, stages):
        # Значения pn для каждого звена в зависимости от общего количества звеньев для Гаусса
        pn_values_gauss = {
            (2, 1): 2.145,  # Значение pn для C1, если выбрано 2 звена
            (2, 2): 0.5747,  # Значение pn для L2, если выбрано 2 звена
            (3, 1): 2.196,  # Значение pn для C1, если выбрано 3 звена
            (3, 2): 0.9674,  # Значение pn для L2, если выбрано 3 звена
            (3, 3): 0.3364,  # Значение pn для C3, если выбрано 3 звена
            (4, 1): 2.257,
            (4, 2): 1.090,
            (4, 3): 0.6776,
            (4, 4): 0.2352,
            (5, 1): 2.251,
            (5, 2): 1.108,
            (5, 3): 0.8015,
            (5, 4): 0.5058,
            (5, 5): 0.1738,
            (6, 1): 2.262,
            (6, 2): 1.111,
            (6, 3): 0.8527,
            (6, 4): 0.6383,
            (6, 5): 0.3996,
            (6, 6): 0.1364,
            (7, 1): 2.264,
            (7, 2): 1.104,
            (7, 3): 0.8684,
            (7, 4): 0.7015,
            (7, 5): 0.5245,
            (7, 6): 0.3257,
            (7, 7): 0.1106,
            (8, 1): 2.259,
            (8, 2): 1.092,
            (8, 3): 0.8670,
            (8, 4): 0.7281,
            (8, 5): 0.5918,
            (8, 6): 0.4397,
            (8, 7): 0.2710,
            (8, 8): 0.0916,
            (9, 1): 2.264,
            (9, 2): 1.086,
            (9, 3): 0.8634,
            (9, 4): 0.7404,
            (9, 5): 0.6302,
            (9, 6): 0.5105,
            (9, 7): 0.3766,
            (9, 8): 0.2312,
            (9, 9): 0.0780,
        }
        return {k: v for k, v in pn_values_gauss.items() if k[0] == stages}


    def calculate_k(self, w_values, components, voltage, Zc, stages):
        
        k_values = []
        for w in w_values:
            # Начинаем с voltage (сопротивление R)
            Z = voltage

            # Проходим по звеньям в обратном порядке (от последнего к первому)
            for i in range(stages, 0, -1):
                if i % 2 == 1:  # Если звено нечетное, это C
                    C = components[f"C{i}"]
                    Z = Z / (1 + (1j * w * C * Z))
                else:  # Если звено четное, это L
                    L = components[f"L{i}"]
                    Z = Z + (1j * w * L)

            # Расчет коэффициента отражения G
            G = (Z - Zc) / (Z + Zc)
            abs_G = abs(G)

            # Проверка на случай, когда |G| = 1 (деление на ноль)
            if abs_G >= 1.0:
                # Если |G| >= 1, устанавливаем K равным большому значению (например, 1000)
                K = 1000.0
            else:
                # Расчет коэффициента стоячей волны K
                K = (1 + abs_G) / (1 - abs_G)

            k_values.append(K)
        return k_values

    def calculate_lowpass_butterworth(self, stages, cutoff_freq, range_start, step, range_end, voltage):
        # Расчет L и C
        L, C = self.calculate_L_C(cutoff_freq, voltage)

        # Значения pn для каждого звена в зависимости от общего количества звеньев
        pn_values = self.get_pn_values(stages)

        # Расчет Ln и Cn для каждого звена
        results = []
        components = {}  # Словарь для хранения значений компонентов (C1, L2, C3 и т.д.)
        for i in range(1, stages + 1):
            if i % 2 == 1:  # Если звено нечетное, рассчитываем Cn
                p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
                Cn = C * p
                results.append(f"C{i} = {Cn} Ф")
                components[f"C{i}"] = Cn  # Сохраняем значение компонента
            else:  # Если звено четное, рассчитываем Ln
                Ln = L * p
                results.append(f"L{i} = {Ln} Гн")
                components[f"L{i}"] = Ln  # Сохраняем значение компонента

        # Добавляем информацию о количестве звеньев
        results.insert(0, f"Расчет номиналов для {stages} звеньев:")

        # Расчет функции передачи g(w)
        w_values = []
        g_w_values = []
        w = range_start
        while w <= range_end:
            g_w = abs(1 / ((1 + (w / cutoff_freq) ** stages) ** 0.5))
            if not self.hide_transfer_function_checkbox.isChecked():
                results.append(f"g({w}) = {g_w}")
            w_values.append(w)
            g_w_values.append(g_w)
            w += step

        # Очищаем график перед построением нового
        self.graph_view.clear()

        # Построение первого графика
        self.graph_view.plot(np.array(w_values), np.array(g_w_values), pen=pg.mkPen('k', width=2))

        # Получаем Zc из введенных данных
        Zc = float(self.zc_input.text())  # Zc - характеристическое сопротивление

        # Расчет K с использованием универсального метода
        k_values = self.calculate_k(w_values, components, voltage, Zc, stages)

        # Очищаем второй график перед построением нового
        self.graph_view2.clear()

        # Построение второго графика
        if k_values:
            self.graph_view2.plot(np.array(w_values), np.array(k_values), pen=pg.mkPen('r', width=2))

        return "\n".join(results)

    def calculate_lowpass_chebyshev(self, stages, order, ripple, cutoff_freq, range_start, step, range_end, voltage):
        # Расчет L и C
        L, C = self.calculate_L_C(cutoff_freq, voltage)

        # Значения pn для каждого звена в зависимости от общего количества звеньев
        pn_values = self.get_pn_values_chebyshev(stages)

        # Расчет Ln и Cn для каждого звена
        results = []
        components = {}  # Словарь для хранения значений компонентов (C1, L2, C3 и т.д.)
        for i in range(1, stages + 1):
            if i % 2 == 1:  # Если звено нечетное, рассчитываем Cn
                p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
                Cn = C * p
                results.append(f"C{i} = {Cn} Ф")
                components[f"C{i}"] = Cn  # Сохраняем значение компонента
            else:  # Если звено четное, рассчитываем Ln
                Ln = L * p
                results.append(f"L{i} = {Ln} Гн")
                components[f"L{i}"] = Ln  # Сохраняем значение компонента

        # Добавляем информацию о количестве звеньев
        results.insert(0, f"Расчет номиналов для {stages} звеньев:")

        # Расчет функции передачи g(w)
        w_values = []
        g_w_values = []
        w = range_start
        while w <= range_end:
            if order == 1:
                E = np.sqrt((10 ** (ripple / 10)) - 1)
                x = w / cutoff_freq
                if abs(x) > 1:  # Если x выходит за диапазон от -1 до 1
                    g_w = 0  # Устанавливаем g(w) равным 0
                else:
                    c = np.cos(stages * np.arccos(x))
                    g_w = abs(1 / np.sqrt(1 + (E ** 2) * (c ** 2)))
            elif order == 2:
                E2 = np.sqrt((10 ** (ripple / 10)) - 1)
                y = cutoff_freq / w
                if w < cutoff_freq:  # Если w меньше cutoff_freq
                    g_w = 1  # Устанавливаем g(w) равным 1
                else:
                    c = np.cos(stages * np.arccos(y))
                    g_w = abs(1 / np.sqrt(1 + (1 / (E2 ** 2 * c ** 2))))
            w_values.append(w)
            g_w_values.append(g_w)
            if not self.hide_transfer_function_checkbox.isChecked() and g_w != 0:
                results.append(f"g({w}) = {g_w}")
            w += step

        # Очищаем график перед построением нового
        self.graph_view.clear()

        # Построение первого графика
        self.graph_view.plot(np.array(w_values), np.array(g_w_values), pen=pg.mkPen('k', width=2))

        # Получаем Zc из введенных данных
        Zc = float(self.zc_input.text())  # Zc - характеристическое сопротивление

        # Расчет K с использованием универсального метода
        k_values = self.calculate_k(w_values, components, voltage, Zc, stages)

        # Очищаем второй график перед построением нового
        self.graph_view2.clear()

        # Построение второго графика
        if k_values:
            self.graph_view2.plot(np.array(w_values), np.array(k_values), pen=pg.mkPen('r', width=2))

        return "\n".join(results)

    def calculate_lowpass_gauss(self, stages, cutoff_freq, range_start, step, range_end, voltage):
        # Расчет L и C
        L, C = self.calculate_L_C(cutoff_freq, voltage)

        # Значения pn для каждого звена в зависимости от общего количества звеньев
        pn_values = self.get_pn_values_gauss(stages)

        # Расчет Ln и Cn для каждого звена
        results = []
        components = {}  # Словарь для хранения значений компонентов (C1, L2, C3 и т.д.)
        for i in range(1, stages + 1):
            if i % 2 == 1:  # Если звено нечетное, рассчитываем Cn
                p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
                Cn = C * p
                results.append(f"C{i} = {Cn} Ф")
                components[f"C{i}"] = Cn  # Сохраняем значение компонента
            else:  # Если звено четное, рассчитываем Ln
                Ln = L * p
                results.append(f"L{i} = {Ln} Гн")
                components[f"L{i}"] = Ln  # Сохраняем значение компонента

        # Добавляем информацию о количестве звеньев
        results.insert(0, f"Расчет номиналов для {stages} звеньев:")

        # Расчет функции передачи h(f)
        f_values = []
        h_f_values = []
        f = range_start
        while f <= range_end:
            a = np.sqrt(np.log(2) / 2) * (1 / cutoff_freq)
            h_f = abs(np.exp(-((f * a) ** stages)))
            if not self.hide_transfer_function_checkbox.isChecked():
                results.append(f"h({f}) = {h_f}")
            f_values.append(f)
            h_f_values.append(h_f)
            f += step

        # Очищаем график перед построением нового
        self.graph_view.clear()

        # Построение первого графика
        self.graph_view.plot(np.array(f_values), np.array(h_f_values), pen=pg.mkPen('k', width=2))

        # Получаем Zc из введенных данных
        Zc = float(self.zc_input.text())  # Zc - характеристическое сопротивление

        # Расчет K с использованием универсального метода
        k_values = self.calculate_k(f_values, components, voltage, Zc, stages)

        # Очищаем второй график перед построением нового
        self.graph_view2.clear()

        # Построение второго графика
        if k_values:
            self.graph_view2.plot(np.array(f_values), np.array(k_values), pen=pg.mkPen('r', width=2))

        return "\n".join(results)

    def calculate_k_fvch(self, w_values, components, voltage, Zc, stages):
        """
        Универсальный расчет коэффициента стоячей волны по напряжению (K) для любого количества звеньев ФВЧ.
        voltage - это сопротивление R, введенное пользователем.
        """
        k_values = []
        for w in w_values:
            # Начинаем с voltage (сопротивление R)
            Z = voltage

            # Проходим по звеньям в обратном порядке (от последнего к первому)
            for i in range(stages, 0, -1):
                if i % 2 == 1:  # Если звено нечетное, это L
                    L = components[f"L{i}"]
                    Z = (Z * 1j * L * w * 2 * math.pi) / (Z + (1j * L * w * 2 * math.pi))
                else:  # Если звено четное, это C
                    C = components[f"C{i}"]
                    Z = Z + (1 / (2 * math.pi * 1j * w * C))

            # Расчет коэффициента отражения G
            G = (Z - Zc) / (Z + Zc)
            abs_G = abs(G)

            # Проверка на случай, когда |G| = 1 (деление на ноль)
            if abs_G >= 1.0:
                # Если |G| >= 1, устанавливаем K равным большому значению (например, 1000)
                K = 1000.0
            else:
                # Расчет коэффициента стоячей волны K
                K = (1 + abs_G) / (1 - abs_G)

            k_values.append(K)
        return k_values

    def calculate_1_butterworth(self, stages, cutoff_freq, range_start, step, range_end, voltage):
        # Расчет L и C
        C, L = self.calculate_L_C(cutoff_freq, voltage)  # Обратите внимание, что здесь L и C меняются местами

        # Значения pn для каждого звена в зависимости от общего количества звеньев
        pn_values = self.get_pn_values(stages)

        # Расчет Ln и Cn для каждого звена
        results = []
        components = {}  # Словарь для хранения значений компонентов (L1, C2, L3 и т.д.)
        for i in range(1, stages + 1):
            p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
            if i % 2 == 1:  # Если звено нечетное, рассчитываем Ln
                Ln = C * p
                results.append(f"L{i} = {Ln} Гн")
                components[f"L{i}"] = Ln  # Сохраняем значение компонента
            else:  # Если звено четное, рассчитываем Cn
                Cn = L * p
                results.append(f"C{i} = {Cn} Ф")
                components[f"C{i}"] = Cn  # Сохраняем значение компонента

        # Добавляем информацию о количестве звеньев
        results.insert(0, f"Расчет номиналов для {stages} звеньев:")

        # Расчет функции передачи n(w)
        w_values = []
        n_w_values = []
        w = range_start
        while w <= range_end:
            n_w = abs(1 / ((1 + (cutoff_freq / w) ** stages) ** 0.5))
            if not self.hide_transfer_function_checkbox.isChecked():
                results.append(f"n({w}) = {n_w}")
            w_values.append(w)
            n_w_values.append(n_w)
            w += step

        # Очищаем график перед построением нового
        self.graph_view.clear()

        # Построение первого графика
        self.graph_view.plot(np.array(w_values), np.array(n_w_values), pen=pg.mkPen('k', width=2))

        # Получаем Zc из введенных данных
        Zc = float(self.zc_input.text())  # Zc - характеристическое сопротивление

        # Расчет K с использованием универсального метода
        k_values = self.calculate_k_fvch(w_values, components, voltage, Zc, stages)

        # Очищаем второй график перед построением нового
        self.graph_view2.clear()

        # Построение второго графика
        if k_values:
            self.graph_view2.plot(np.array(w_values), np.array(k_values), pen=pg.mkPen('r', width=2))

        return "\n".join(results)

    # ФВЧ Чебышева
    def calculate_1_chebyshev(self, stages, order, ripple, cutoff_freq, range_start, step, range_end, voltage):
        # Расчет L и C
        C, L = self.calculate_L_C(cutoff_freq, voltage)  # Обратите внимание, что здесь L и C меняются местами

        # Значения pn для каждого звена в зависимости от общего количества звеньев
        pn_values = self.get_pn_values_chebyshev(stages)

        # Расчет Ln и Cn для каждого звена
        results = []
        components = {}  # Словарь для хранения значений компонентов (L1, C2, L3 и т.д.)
        for i in range(1, stages + 1):
            p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
            if i % 2 == 1:  # Если звено нечетное, рассчитываем Ln
                Ln = C * p
                results.append(f"L{i} = {Ln} Гн")
                components[f"L{i}"] = Ln  # Сохраняем значение компонента
            else:  # Если звено четное, рассчитываем Cn
                Cn = L * p
                results.append(f"C{i} = {Cn} Ф")
                components[f"C{i}"] = Cn  # Сохраняем значение компонента

        # Добавляем информацию о количестве звеньев
        results.insert(0, f"Расчет номиналов для {stages} звеньев:")

        # Расчет функции передачи g(w)
        w_values = []
        g_w_values = []
        w = range_start
        while w <= range_end:
            if order == 1:
                E = np.sqrt((10 ** (ripple / 10)) - 1)
                x = cutoff_freq / w
                if abs(x) > 1:  # Если x выходит за диапазон от -1 до 1
                    g_w = 0  # Устанавливаем g(w) равным 0
                else:
                    c = np.cos(stages * np.arccos(x))
                    g_w = abs(1 / np.sqrt(1 + (E ** 2) * (c ** 2)))
            elif order == 2:
                E2 = np.sqrt((10 ** (ripple / 10)) - 1)
                y = w / cutoff_freq
                if w > cutoff_freq:  # Если w больше cutoff_freq
                    g_w = 1  # Устанавливаем g(w) равным 1
                else:
                    c = np.cos(stages * np.arccos(y))
                    g_w = abs(1 / np.sqrt(1 + (1 / (E2 ** 2 * c ** 2))))
            w_values.append(w)
            g_w_values.append(g_w)
            if not self.hide_transfer_function_checkbox.isChecked() and g_w != 0:
                results.append(f"g({w}) = {g_w}")
            w += step

        # Очищаем график перед построением нового
        self.graph_view.clear()

        # Построение первого графика
        self.graph_view.plot(np.array(w_values), np.array(g_w_values), pen=pg.mkPen('k', width=2))

        # Получаем Zc из введенных данных
        Zc = float(self.zc_input.text())  # Zc - характеристическое сопротивление

        # Расчет K с использованием универсального метода
        k_values = self.calculate_k_fvch(w_values, components, voltage, Zc, stages)

        # Ограничение максимального значения K для графика
        k_values = [min(k, 100) for k in k_values]  # Ограничиваем K значением 100

        # Очищаем второй график перед построением нового
        self.graph_view2.clear()

        # Построение второго графика
        if k_values:
            self.graph_view2.plot(np.array(w_values), np.array(k_values), pen=pg.mkPen('r', width=2))

        return "\n".join(results)

    # ФВЧ Гаусса
    def calculate_1_gauss(self, stages, cutoff_freq, range_start, step, range_end, voltage):
        # Расчет L и C
        C, L = self.calculate_L_C(cutoff_freq, voltage)  # Обратите внимание, что здесь L и C меняются местами

        # Значения pn для каждого звена в зависимости от общего количества звеньев
        pn_values = self.get_pn_values_gauss(stages)

        # Расчет Ln и Cn для каждого звена
        results = []
        components = {}  # Словарь для хранения значений компонентов (L1, C2, L3 и т.д.)
        for i in range(1, stages + 1):
            p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
            if i % 2 == 1:  # Если звено нечетное, рассчитываем Ln
                Ln = C * p
                results.append(f"L{i} = {Ln} Гн")
                components[f"L{i}"] = Ln  # Сохраняем значение компонента
            else:  # Если звено четное, рассчитываем Cn
                Cn = L * p
                results.append(f"C{i} = {Cn} Ф")
                components[f"C{i}"] = Cn  # Сохраняем значение компонента

        # Добавляем информацию о количестве звеньев
        results.insert(0, f"Расчет номиналов для {stages} звеньев:")

        # Расчет функции передачи h(f)
        f_values = []
        h_f_values = []
        f = range_start
        while f <= range_end:
            b = np.sqrt(np.log(2) / 2) * (1 / cutoff_freq)
            h_f = np.exp(1 / -((f * b) ** stages))
            if not self.hide_transfer_function_checkbox.isChecked():
                results.append(f"h({f}) = {h_f}")
            f_values.append(f)
            h_f_values.append(h_f)
            f += step

        # Очищаем график перед построением нового
        self.graph_view.clear()

        # Построение первого графика
        self.graph_view.plot(np.array(f_values), np.array(h_f_values), pen=pg.mkPen('k', width=2))

        # Получаем Zc из введенных данных
        Zc = float(self.zc_input.text())  # Zc - характеристическое сопротивление

        # Расчет K с использованием универсального метода
        k_values = self.calculate_k_fvch(f_values, components, voltage, Zc, stages)

        # Ограничение максимального значения K для графика
        k_values = [min(k, 100) for k in k_values]  # Ограничиваем K значением 100

        # Очищаем второй график перед построением нового
        self.graph_view2.clear()

        # Построение второго графика
        if k_values:
            self.graph_view2.plot(np.array(f_values), np.array(k_values), pen=pg.mkPen('r', width=2))

        return "\n".join(results)
    
    def calculate_k_bandpass(self, w_values, components_fvch, components_fnch, voltage, Zc, stages):
        """
        Универсальный расчет коэффициента стоячей волны K для полосового фильтра.
        components_fvch - компоненты для ФВЧ (L1, C2, L3, ...)
        components_fnch - компоненты для ФНЧ (C1, L2, C3, ...)
        """
        k_values = []
        for w in w_values:
            # Расчет импеданса для ФВЧ
            Z_fvch = voltage  # Начинаем с Za (voltage)
            for i in range(stages, 0, -1):
                if i % 2 == 1:  # Если звено нечетное, это L
                    L = components_fvch[f"L{i}"]
                    Z_fvch = (Z_fvch * 1j * L * w * 2 * math.pi) / (Z_fvch + (1j * L * w * 2 * math.pi))
                else:  # Если звено четное, это C
                    C = components_fvch[f"C{i}"]
                    Z_fvch = Z_fvch + (1 / (2 * math.pi * 1j * w * C))

            # Расчет импеданса для ФНЧ
            Z_fnch = voltage  # Начинаем с Za (voltage)
            for i in range(stages, 0, -1):
                if i % 2 == 1:  # Если звено нечетное, это C
                    C = components_fnch[f"C{i}"]
                    Z_fnch = Z_fnch / (1 + (1j * w * C * Z_fnch))
                else:  # Если звено четное, это L
                    L = components_fnch[f"L{i}"]
                    Z_fnch = Z_fnch + (1j * w * L)

            # Общий импеданс
            Z_total = Z_fvch + Z_fnch

            # Расчет коэффициента отражения G
            G = (Z_total - Zc) / (Z_total + Zc)
            abs_G = abs(G)

            # Расчет коэффициента стоячей волны K
            if abs_G >= 1.0:
                K = 1000.0  # Ограничиваем K, если |G| >= 1
            else:
                K = (1 + abs_G) / (1 - abs_G)

            k_values.append(K)

        return k_values

    # Полосовой Баттерворта
    def calculate_2_butterworth(self, stages, cutoff_freq1, cutoff_freq2, range_start, step, range_end, voltage):
        # Если начало диапазона равно нулю, установите его равным 0.01, чтобы избежать деления на ноль
        range_start = max(0.01, range_start)

        # Расчет L и C для ФВЧ
        C1, L1 = self.calculate_L_C(cutoff_freq1, voltage)  # Обратите внимание, что здесь L и C меняются местами

        # Расчет L и C для ФНЧ
        L2, C2 = self.calculate_L_C(cutoff_freq2, voltage)

        # Значения pn для каждого звена в зависимости от общего количества звеньев
        pn_values = self.get_pn_values(stages)

        # Расчет Ln и Cn для каждого звена для ФВЧ
        components_fvch = {}  # Словарь для хранения компонентов ФВЧ
        for i in range(1, stages + 1):
            p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
            if i % 2 == 1:  # Если звено нечетное, рассчитываем Ln
                Ln1 = C1 * p
                components_fvch[f"L{i}"] = Ln1
            else:  # Если звено четное, рассчитываем Cn
                Cn1 = L1 * p
                components_fvch[f"C{i}"] = Cn1

        # Расчет Ln и Cn для каждого звена для ФНЧ
        components_fnch = {}  # Словарь для хранения компонентов ФНЧ
        for i in range(1, stages + 1):
            p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
            if i % 2 == 1:  # Если звено нечетное, рассчитываем Cn
                Cn2 = C2 * p
                components_fnch[f"C{i}"] = Cn2
            else:  # Если звено четное, рассчитываем Ln
                Ln2 = L2 * p
                components_fnch[f"L{i}"] = Ln2

        # Добавляем информацию о количестве звеньев
        results = [f"Расчет номиналов для {stages} звеньев:"]
        results.append("Расчет для ФВЧ:")
        for key, value in components_fvch.items():
            results.append(f"{key} = {value} {'Гн' if 'L' in key else 'Ф'}")

        results.append("Расчет для ФНЧ:")
        for key, value in components_fnch.items():
            results.append(f"{key} = {value} {'Гн' if 'L' in key else 'Ф'}")

        # Расчет функции передачи v(m)
        m_values = []
        v_m_values = []
        m = range_start
        while m <= range_end:
            v_m = abs(1 / ((1 + (m / cutoff_freq2) ** stages + (cutoff_freq1 / m) ** stages) ** 0.5))
            if not self.hide_transfer_function_checkbox.isChecked():
                results.append(f"v({m}) = {v_m}")
            m_values.append(m)
            v_m_values.append(v_m)
            m += step

        # Очищаем график перед построением нового
        self.graph_view.clear()

        # Построение первого графика
        self.graph_view.plot(np.array(m_values), np.array(v_m_values), pen=pg.mkPen('k', width=2))

        # Получаем Zc из введенных данных
        Zc = float(self.zc_input.text())  # Zc - характеристическое сопротивление

        # Расчет K с использованием нового метода
        k_values = self.calculate_k_bandpass(m_values, components_fvch, components_fnch, voltage, Zc, stages)

        # Очищаем второй график перед построением нового
        self.graph_view2.clear()

        # Построение второго графика
        if k_values:
            self.graph_view2.plot(np.array(m_values), np.array(k_values), pen=pg.mkPen('r', width=2))

        return "\n".join(results)

    # Полосовой Чебышева
    def calculate_2_chebyshev(self, stages, order, ripple, cutoff_freq1, cutoff_freq2, range_start, step, range_end, voltage):
        # Расчет L и C для ФВЧ
        C1, L1 = self.calculate_L_C(cutoff_freq1, voltage)  # Обратите внимание, что здесь L и C меняются местами

        # Расчет L и C для ФНЧ
        L2, C2 = self.calculate_L_C(cutoff_freq2, voltage)

        # Значения pn для каждого звена в зависимости от общего количества звеньев
        pn_values = self.get_pn_values_chebyshev(stages)

        # Расчет Ln и Cn для каждого звена для ФВЧ
        components_fvch = {}  # Словарь для хранения компонентов ФВЧ
        for i in range(1, stages + 1):
            p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
            if i % 2 == 1:  # Если звено нечетное, рассчитываем Ln
                Ln1 = C1 * p
                components_fvch[f"L{i}"] = Ln1
            else:  # Если звено четное, рассчитываем Cn
                Cn1 = L1 * p
                components_fvch[f"C{i}"] = Cn1

        # Расчет Ln и Cn для каждого звена для ФНЧ
        components_fnch = {}  # Словарь для хранения компонентов ФНЧ
        for i in range(1, stages + 1):
            p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
            if i % 2 == 1:  # Если звено нечетное, рассчитываем Cn
                Cn2 = C2 * p
                components_fnch[f"C{i}"] = Cn2
            else:  # Если звено четное, рассчитываем Ln
                Ln2 = L2 * p
                components_fnch[f"L{i}"] = Ln2

        # Добавляем информацию о количестве звеньев
        results = [f"Расчет номиналов для {stages} звеньев:"]
        results.append("Расчет для ФВЧ:")
        for key, value in components_fvch.items():
            results.append(f"{key} = {value} {'Гн' if 'L' in key else 'Ф'}")

        results.append("Расчет для ФНЧ:")
        for key, value in components_fnch.items():
            results.append(f"{key} = {value} {'Гн' if 'L' in key else 'Ф'}")

        # Расчет функции передачи v(m)
        m_values = []
        v_m_values = []
        m = range_start
        while m <= range_end:
            if order == 1:
                E = np.sqrt((10 ** (ripple / 10)) - 1)
                x = (cutoff_freq1 / m) - (m / cutoff_freq2)
                if abs(x) > 1 or m == range_start or m == range_end:  # Изменено здесь
                    v_m = 0
                else:
                    c = np.cos(stages * np.arccos(x))
                    v_m = abs(1 / np.sqrt(1 + (E ** 2) * (c ** 2)))
            elif order == 2:
                E2 = np.sqrt((10 ** (ripple / 10)) - 1)
                y = 1 / ((cutoff_freq1 / m) - (m / cutoff_freq2))
                y = max(min(y, 1), -1)  # Изменено здесь
                if m == range_start or m == range_end:
                    v_m = 0
                else:
                    c = np.cos(stages * np.arccos(y))
                    v_m = abs(1 / np.sqrt(1 + (1 / (E2 ** 2 * c ** 2))))
            m_values.append(m)
            v_m_values.append(v_m)
            if not self.hide_transfer_function_checkbox.isChecked() and v_m != 0:
                results.append(f"v({m}) = {v_m}")
            m += step

        # Очищаем график перед построением нового
        self.graph_view.clear()

        # Построение первого графика
        self.graph_view.plot(np.array(m_values), np.array(v_m_values), pen=pg.mkPen('k', width=2))

        # Получаем Zc из введенных данных
        Zc = float(self.zc_input.text())  # Zc - характеристическое сопротивление

        # Расчет K с использованием универсального метода
        k_values = self.calculate_k_bandpass(m_values, components_fvch, components_fnch, voltage, Zc, stages)

        # Очищаем второй график перед построением нового
        self.graph_view2.clear()

        # Построение второго графика
        if k_values:
            self.graph_view2.plot(np.array(m_values), np.array(k_values), pen=pg.mkPen('r', width=2))

        return "\n".join(results)

    #Полосовой Гаусса
    def calculate_2_gauss(self, stages, cutoff_freq1, cutoff_freq2, range_start, step, range_end, voltage):
        # Расчет L и C для ФВЧ
        C1, L1 = self.calculate_L_C(cutoff_freq1, voltage)  # Обратите внимание, что здесь L и C меняются местами

        # Расчет L и C для ФНЧ
        L2, C2 = self.calculate_L_C(cutoff_freq2, voltage)

        # Значения pn для каждого звена в зависимости от общего количества звеньев
        pn_values = self.get_pn_values_gauss(stages)

        # Расчет Ln и Cn для каждого звена для ФВЧ
        components_fvch = {}  # Словарь для хранения компонентов ФВЧ
        for i in range(1, stages + 1):
            p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
            if i % 2 == 1:  # Если звено нечетное, рассчитываем Ln
                Ln1 = C1 * p
                components_fvch[f"L{i}"] = Ln1
            else:  # Если звено четное, рассчитываем Cn
                Cn1 = L1 * p
                components_fvch[f"C{i}"] = Cn1

        # Расчет Ln и Cn для каждого звена для ФНЧ
        components_fnch = {}  # Словарь для хранения компонентов ФНЧ
        for i in range(1, stages + 1):
            p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
            if i % 2 == 1:  # Если звено нечетное, рассчитываем Cn
                Cn2 = C2 * p
                components_fnch[f"C{i}"] = Cn2
            else:  # Если звено четное, рассчитываем Ln
                Ln2 = L2 * p
                components_fnch[f"L{i}"] = Ln2

        # Добавляем информацию о количестве звеньев
        results = [f"Расчет номиналов для {stages} звеньев:"]
        results.append("Расчет для ФВЧ:")
        for key, value in components_fvch.items():
            results.append(f"{key} = {value} {'Гн' if 'L' in key else 'Ф'}")

        results.append("Расчет для ФНЧ:")
        for key, value in components_fnch.items():
            results.append(f"{key} = {value} {'Гн' if 'L' in key else 'Ф'}")

        # Расчет функции передачи s(f)
        f_values = []
        s_f_values = []
        f = range_start
        while f <= range_end:
            b = np.sqrt(np.log(2) / 2) * (1 / cutoff_freq1)
            a = np.sqrt(np.log(2) / 2) * (1 / cutoff_freq2)
            s_f = np.exp(1 / -((f * b) ** stages)) + np.exp(-((f * a) ** stages)) - 1
            if not self.hide_transfer_function_checkbox.isChecked():
                results.append(f"s({f}) = {s_f}")
            f_values.append(f)
            s_f_values.append(s_f)
            f += step

        # Очищаем график перед построением нового
        self.graph_view.clear()

        # Построение первого графика
        self.graph_view.plot(np.array(f_values), np.array(s_f_values), pen=pg.mkPen('k', width=2))

        # Получаем Zc из введенных данных
        Zc = float(self.zc_input.text())  # Zc - характеристическое сопротивление

        # Расчет K с использованием универсального метода
        k_values = self.calculate_k_bandpass(f_values, components_fvch, components_fnch, voltage, Zc, stages)

        # Очищаем второй график перед построением нового
        self.graph_view2.clear()

        # Построение второго графика
        if k_values:
            self.graph_view2.plot(np.array(f_values), np.array(k_values), pen=pg.mkPen('r', width=2))

        return "\n".join(results)

    # Режекторный Баттерворта
    def calculate_3_butterworth(self, stages, cutoff_freq1, cutoff_freq2, range_start, step, range_end, voltage):
        # Если начало диапазона равно нулю, установите его равным 0.01, чтобы избежать деления на ноль
        range_start = max(0.01, range_start)

        # Расчет L и C для ФНЧ
        L1, C1 = self.calculate_L_C(cutoff_freq1, voltage)

        # Расчет L и C для ФВЧ
        C2, L2 = self.calculate_L_C(cutoff_freq2, voltage)  # Обратите внимание, что здесь L и C меняются местами

        # Значения pn для каждого звена в зависимости от общего количества звеньев
        pn_values = self.get_pn_values(stages)

        # Расчет Ln и Cn для каждого звена для ФНЧ
        components_fnch = {}  # Словарь для хранения компонентов ФНЧ
        for i in range(1, stages + 1):
            p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
            if i % 2 == 1:  # Если звено нечетное, рассчитываем Cn
                Cn1 = C1 * p
                components_fnch[f"C{i}"] = Cn1
            else:  # Если звено четное, рассчитываем Ln
                Ln1 = L1 * p
                components_fnch[f"L{i}"] = Ln1

        # Расчет Ln и Cn для каждого звена для ФВЧ
        components_fvch = {}  # Словарь для хранения компонентов ФВЧ
        for i in range(1, stages + 1):
            p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
            if i % 2 == 1:  # Если звено нечетное, рассчитываем Ln
                Ln2 = C2 * p
                components_fvch[f"L{i}"] = Ln2
            else:  # Если звено четное, рассчитываем Cn
                Cn2 = L2 * p
                components_fvch[f"C{i}"] = Cn2

        # Добавляем информацию о количестве звеньев
        results = [f"Расчет номиналов для {stages} звеньев:"]
        results.append("Расчет для ФНЧ:")
        for key, value in components_fnch.items():
            results.append(f"{key} = {value} {'Гн' if 'L' in key else 'Ф'}")

        results.append("Расчет для ФВЧ:")
        for key, value in components_fvch.items():
            results.append(f"{key} = {value} {'Гн' if 'L' in key else 'Ф'}")

        # Расчет функции передачи w(m)
        m_values = []
        w_m_values = []
        m = range_start
        while m <= range_end:
            w_m = abs(
                (1 / ((1 + (cutoff_freq1 / m) ** stages) ** 0.5)) + (-1 / ((1 + (m / cutoff_freq2) ** stages) ** 0.5)))
            if not self.hide_transfer_function_checkbox.isChecked():
                results.append(f"w({m}) = {w_m}")
            m_values.append(m)
            w_m_values.append(w_m)
            m += step

        # Очищаем график перед построением нового
        self.graph_view.clear()

        # Построение первого графика
        self.graph_view.plot(np.array(m_values), np.array(w_m_values), pen=pg.mkPen('k', width=2))

        # Получаем Zc из введенных данных
        Zc = float(self.zc_input.text())  # Zc - характеристическое сопротивление

        # Расчет K с использованием универсального метода
        k_values = self.calculate_k_bandpass(m_values, components_fvch, components_fnch, voltage, Zc, stages)

        # Очищаем второй график перед построением нового
        self.graph_view2.clear()

        # Построение второго графика
        if k_values:
            self.graph_view2.plot(np.array(m_values), np.array(k_values), pen=pg.mkPen('r', width=2))

        return "\n".join(results)
    
    # Режекторный Чебышева
    def calculate_3_chebyshev(self, stages, order, ripple, cutoff_freq1, cutoff_freq2, range_start, step, range_end, voltage):
        # Расчет L и C для ФНЧ
        L1, C1 = self.calculate_L_C(cutoff_freq1, voltage)

        # Расчет L и C для ФВЧ
        C2, L2 = self.calculate_L_C(cutoff_freq2, voltage)  # Обратите внимание, что здесь L и C меняются местами

        # Значения pn для каждого звена в зависимости от общего количества звеньев
        pn_values = self.get_pn_values_chebyshev(stages)

        # Расчет Ln и Cn для каждого звена для ФНЧ
        components_fnch = {}  # Словарь для хранения компонентов ФНЧ
        for i in range(1, stages + 1):
            p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
            if i % 2 == 1:  # Если звено нечетное, рассчитываем Cn
                Cn1 = C1 * p
                components_fnch[f"C{i}"] = Cn1
            else:  # Если звено четное, рассчитываем Ln
                Ln1 = L1 * p
                components_fnch[f"L{i}"] = Ln1

        # Расчет Ln и Cn для каждого звена для ФВЧ
        components_fvch = {}  # Словарь для хранения компонентов ФВЧ
        for i in range(1, stages + 1):
            p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
            if i % 2 == 0:  # Если звено четное, рассчитываем Cn
                Cn2 = C2 * p
                components_fvch[f"C{i}"] = Cn2
            else:  # Если звено нечетное, рассчитываем Ln
                Ln2 = L2 * p
                components_fvch[f"L{i}"] = Ln2

        # Добавляем информацию о количестве звеньев
        results = [f"Расчет номиналов для {stages} звеньев:"]
        results.append("Расчет для ФНЧ:")
        for key, value in components_fnch.items():
            results.append(f"{key} = {value} {'Гн' if 'L' in key else 'Ф'}")

        results.append("Расчет для ФВЧ:")
        for key, value in components_fvch.items():
            results.append(f"{key} = {value} {'Гн' if 'L' in key else 'Ф'}")

        # Расчет функции передачи w(m)
        m_values = []
        w_m_values = []
        m = range_start
        while m <= range_end:
            if order == 1:
                E = np.sqrt((10 ** (ripple / 10)) - 1)
                x = 1 / ((cutoff_freq1 / m) - (m / cutoff_freq2))
                if abs(x) > 1:  # Если x выходит за диапазон от -1 до 1
                    w_m = 0  # Устанавливаем w(m) равным 0
                else:
                    c = np.cos(stages * np.arccos(x))
                    w_m = abs(1 / np.sqrt(1 + (E ** 2) * (c ** 2)))
            elif order == 2:
                E2 = np.sqrt((10 ** (ripple / 10)) - 1)
                y = (cutoff_freq1 / m) - (m / cutoff_freq2)
                if abs(y) > 1:  # Если y выходит за диапазон от -1 до 1
                    w_m = 1  # Устанавливаем w(m) равным 1
                else:
                    c = np.cos(stages * np.arccos(y))
                    w_m = abs(1 / np.sqrt(1 + (1 / (E2 ** 2 * c ** 2))))
            m_values.append(m)
            w_m_values.append(w_m)
            if w_m != 0 and not self.hide_transfer_function_checkbox.isChecked():  # Добавляем проверку на ноль и состояние флажка
                results.append(f"w({m}) = {w_m}")
            m += step

        # Очищаем график перед построением нового
        self.graph_view.clear()

        # Построение первого графика
        self.graph_view.plot(np.array(m_values), np.array(w_m_values), pen=pg.mkPen('k', width=2))

        # Получаем Zc из введенных данных
        Zc = float(self.zc_input.text())  # Zc - характеристическое сопротивление

        # Расчет K с использованием универсального метода
        k_values = self.calculate_k_bandpass(m_values, components_fvch, components_fnch, voltage, Zc, stages)

        # Очищаем второй график перед построением нового
        self.graph_view2.clear()

        # Построение второго графика
        if k_values:
            self.graph_view2.plot(np.array(m_values), np.array(k_values), pen=pg.mkPen('r', width=2))

        return "\n".join(results)

    # Режекторный Гаусса
    def calculate_3_gauss(self, stages, cutoff_freq1, cutoff_freq2, range_start, step, range_end, voltage):
        # Расчет L и C для ФНЧ
        L1, C1 = self.calculate_L_C(cutoff_freq1, voltage)

        # Расчет L и C для ФВЧ
        C2, L2 = self.calculate_L_C(cutoff_freq2, voltage)  # Обратите внимание, что здесь L и C меняются местами

        # Значения pn для каждого звена в зависимости от общего количества звеньев
        pn_values = self.get_pn_values_gauss(stages)

        # Расчет Ln и Cn для каждого звена для ФНЧ
        components_fnch = {}  # Словарь для хранения компонентов ФНЧ
        for i in range(1, stages + 1):
            p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
            if i % 2 == 1:  # Если звено нечетное, рассчитываем Cn
                Cn1 = C1 * p
                components_fnch[f"C{i}"] = Cn1
            else:  # Если звено четное, рассчитываем Ln
                Ln1 = L1 * p
                components_fnch[f"L{i}"] = Ln1

        # Расчет Ln и Cn для каждого звена для ФВЧ
        components_fvch = {}  # Словарь для хранения компонентов ФВЧ
        for i in range(1, stages + 1):
            p = pn_values.get((stages, i), 1)  # Получаем значение pn для текущего звена
            if i % 2 == 0:  # Если звено четное, рассчитываем Cn
                Cn2 = C2 * p
                components_fvch[f"C{i}"] = Cn2
            else:  # Если звено нечетное, рассчитываем Ln
                Ln2 = L2 * p
                components_fvch[f"L{i}"] = Ln2

        # Добавляем информацию о количестве звеньев
        results = [f"Расчет номиналов для {stages} звеньев:"]
        results.append("Расчет для ФНЧ:")
        for key, value in components_fnch.items():
            results.append(f"{key} = {value} {'Гн' if 'L' in key else 'Ф'}")

        results.append("Расчет для ФВЧ:")
        for key, value in components_fvch.items():
            results.append(f"{key} = {value} {'Гн' if 'L' in key else 'Ф'}")

        # Расчет функции передачи t(f)
        f_values = []
        t_f_values = []
        f = range_start
        while f <= range_end:
            b = np.sqrt(np.log(2) / 2) * (1 / cutoff_freq1)
            a = np.sqrt(np.log(2) / 2) * (1 / cutoff_freq2)
            t_f = 1 - (np.exp(1 / -((f * b) ** stages)) + np.exp(-((f * a) ** stages)) - 1)
            if not self.hide_transfer_function_checkbox.isChecked():
                results.append(f"t({f}) = {t_f}")
            f_values.append(f)
            t_f_values.append(t_f)
            f += step

        # Очищаем график перед построением нового
        self.graph_view.clear()

        # Построение первого графика
        self.graph_view.plot(np.array(f_values), np.array(t_f_values), pen=pg.mkPen('k', width=2))

        # Получаем Zc из введенных данных
        Zc = float(self.zc_input.text())  # Zc - характеристическое сопротивление

        # Расчет K с использованием универсального метода
        k_values = self.calculate_k_bandpass(f_values, components_fvch, components_fnch, voltage, Zc, stages)

        # Очищаем второй график перед построением нового
        self.graph_view2.clear()

        # Построение второго графика
        if k_values:
            self.graph_view2.plot(np.array(f_values), np.array(k_values), pen=pg.mkPen('r', width=2))

        return "\n".join(results)

app = QApplication(sys.argv)

# Устанавливаем цвет фона и текста для всех окон
app.setStyleSheet("""
    QWidget {
        background-color: #4A5768;  /* Черный цвет фона */
        color: #FFFFFF;  /* Белый цвет текста */
    }
    QGraphicsView, QComboBox, QTextEdit, QPushButton, QLineEdit {
        background-color: #FFFFFF;  /* Белый цвет фона */
        color: #000000;  /* Черный цвет текста */
    }
""")

window = MainWindow()
window.show()

app.exec_()